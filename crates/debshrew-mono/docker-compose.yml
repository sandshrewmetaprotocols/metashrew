# Docker Compose setup for debshrew-mono development and testing
# Includes Kafka, Zookeeper, Schema Registry, and supporting services

version: '3.8'

services:
  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: debshrew-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - debshrew-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: debshrew-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - debshrew-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Schema Registry - Optional for Avro schema management
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: debshrew-schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - debshrew-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Connect - For downstream integrations
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.4.0
    hostname: kafka-connect
    container_name: debshrew-kafka-connect
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: debshrew-connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: debshrew-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: debshrew-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: debshrew-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
      - kafka-connect-data:/tmp/quickstart
    networks:
      - debshrew-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL - Example downstream database
  postgres:
    image: postgres:15
    hostname: postgres
    container_name: debshrew-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: bitcoin
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./examples/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - debshrew-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch - Example search/analytics backend
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    hostname: elasticsearch
    container_name: debshrew-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - debshrew-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana - Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    hostname: kibana
    container_name: debshrew-kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - debshrew-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI - Web interface for Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: debshrew-kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: debshrew-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: debshrew-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    networks:
      - debshrew-network

  # Bitcoin Core - For testing with real Bitcoin data
  bitcoin-core:
    image: ruimarinho/bitcoin-core:25.0
    hostname: bitcoin-core
    container_name: debshrew-bitcoin-core
    ports:
      - "8332:8332"
      - "8333:8333"
      - "18332:18332"
      - "18333:18333"
    environment:
      BITCOIN_DATA: /home/bitcoin/.bitcoin
    volumes:
      - bitcoin-data:/home/bitcoin/.bitcoin
      - ./examples/bitcoin.conf:/home/bitcoin/.bitcoin/bitcoin.conf
    networks:
      - debshrew-network
    command: >
      bitcoind
      -printtoconsole
      -regtest=1
      -rpcallowip=0.0.0.0/0
      -rpcbind=0.0.0.0
      -rpcuser=bitcoin
      -rpcpassword=password
      -fallbackfee=0.0002
      -zmqpubrawblock=tcp://0.0.0.0:28332
      -zmqpubrawtx=tcp://0.0.0.0:28333

  # Debshrew-Mono - The main application
  debshrew-mono:
    build:
      context: ../..
      dockerfile: crates/debshrew-mono/Dockerfile
    hostname: debshrew-mono
    container_name: debshrew-mono
    depends_on:
      kafka:
        condition: service_healthy
      bitcoin-core:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      RUST_LOG: debshrew_mono=info
      BITCOIN_RPC_URL: http://bitcoin-core:18332
      BITCOIN_RPC_USER: bitcoin
      BITCOIN_RPC_PASSWORD: password
    volumes:
      - debshrew-data:/app/data
      - ./examples/cdc-config.yaml:/app/cdc-config.yaml
    networks:
      - debshrew-network
    command: >
      debshrew-mono
      --bitcoin-rpc-url http://bitcoin-core:18332
      --bitcoin-rpc-user bitcoin
      --bitcoin-rpc-password password
      --data-dir /app/data
      --json-rpc-port 3000
      --cdc-config /app/cdc-config.yaml

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  kafka-connect-data:
    driver: local
  postgres-data:
    driver: local
  elasticsearch-data:
    driver: local
  bitcoin-data:
    driver: local
  debshrew-data:
    driver: local

networks:
  debshrew-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16